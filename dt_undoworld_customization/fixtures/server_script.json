[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-08-14 16:16:52.133302",
  "module": "DT-UndoWorld-Customization",
  "name": "BOM Reference in Serial no.",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "BOM",
  "script": "# Ensure doc.items is not empty\nif doc.items and doc.items[0].custom_serial_no:\n    # Fetch Serial No document\n    serial_no = doc.items[0].custom_serial_no\n\n    if serial_no:\n        # try:\n        sn = frappe.get_doc(\"Serial No\", serial_no)\n        \n        # Create a new entry for custom_reference\n        new_reference = {\n            \"reference_doctype\": \"BOM\",  # Assuming voucher_type is the reference_doctype\n            \"reference_no\": doc.name,\n            \"reference_date\": doc.creation,\n            \"created_by\": doc.owner,\n            # Add other fields as needed\n        }\n        \n        # Append the new entry to custom_reference child table\n        sn.append(\"custom_link_references\", new_reference)\n        \n        sn.save()\n        # except frappe.DoesNotExistError:\n            # frappe.throw(_(\"Serial No {0} not found\").format(serial_no))\n\n    \n# elif doc.serial_and_batch_bundle:\n    \n#     sbb = frappe.get_doc(\"Serial and Batch Bundle\", doc.serial_and_batch_bundle)\n    \n#     # Iterate through entries to fetch serial_no documents\n#     for entry in sbb.entries:\n#         if entry.serial_no:\n#             # Fetch Serial No document\n#             sn = frappe.get_doc(\"Serial No\", entry.serial_no)\n            \n#             new_reference = {\n#                 \"reference_doctype\": doc.voucher_type,  # Assuming voucher_type is the reference_doctype\n#                 \"reference_no\": doc.voucher_no,\n#                 \"reference_date\": doc.posting_date\n#                 # Add other fields as needed\n#             }\n            \n#             sn.append(\"custom_link_references\", new_reference)\n    \n#             sn.save()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-08-14 15:16:38.206007",
  "module": "DT-UndoWorld-Customization",
  "name": "Stock Entry Reference in Serial no",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if doc.items:\n    # go in each line item as serial no is diff for every item\n    for item in doc.items:\n        # Fetch Serial No document\n        if item.serial_no:\n            serial_no = item.serial_no\n            # Fetch Serial No document\n            sn = frappe.get_doc(\"Serial No\", item.serial_no)\n            \n            # Create a new entry for custom_reference\n            new_reference = {\n                \"reference_doctype\": \"Stock Entry\",  # Assuming voucher_type is the reference_doctype\n                \"reference_no\": doc.name,\n                \"reference_date\": doc.posting_date,\n                \"created_by\": doc.owner,\n                # Add other fields as needed\n            }\n            \n            # Append the new entry to custom_reference child table\n            sn.append(\"custom_link_references\", new_reference)\n            sn.save()\n    \n        elif item.serial_and_batch_bundle:\n            \n            sbb = frappe.get_doc(\"Serial and Batch Bundle\", item.serial_and_batch_bundle)\n            \n            # Iterate through entries to fetch serial_no documents\n            for entry in sbb.entries:\n                if entry.serial_no:\n                    # Fetch Serial No document\n                    sn = frappe.get_doc(\"Serial No\", entry.serial_no)\n                    \n                    new_reference = {\n                        \"reference_doctype\": \"Stock Entry\",  # Assuming voucher_type is the reference_doctype\n                        \"reference_no\": doc.name,\n                        \"reference_date\": doc.posting_date,\n                        \"created_by\": doc.owner,\n                        # Add other fields as needed\n                    }\n                    \n                    sn.append(\"custom_link_references\", new_reference)\n                    sn.save()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-08-14 15:16:40.484383",
  "module": "DT-UndoWorld-Customization",
  "name": "Quality Inspection Reference in Serial no.",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Quality Inspection",
  "script": "# Ensure doc.items is not empty\nif doc.item_serial_no:\n    # try:\n    sn = frappe.get_doc(\"Serial No\", doc.item_serial_no)\n    \n    # Create a new entry for custom_reference\n    new_reference = {\n        \"reference_doctype\": \"Quality Inspection\",  # Assuming voucher_type is the reference_doctype\n        \"reference_no\": doc.name,\n        \"reference_date\": doc.creation,\n        \"created_by\": doc.owner,# Uncomment if needed\n        # Add other fields as needed\n    }\n    \n    # Append the new entry to custom_reference child table\n    sn.append(\"custom_link_references\", new_reference)\n    \n    sn.save()\n    # except frappe.DoesNotExistError:\n        # frappe.throw(_(\"Serial No {0} not found\").format(doc.item_serial_no))\n\n    \n# elif doc.serial_and_batch_bundle:\n    \n#     sbb = frappe.get_doc(\"Serial and Batch Bundle\", doc.serial_and_batch_bundle)\n    \n#     # Iterate through entries to fetch serial_no documents\n#     for entry in sbb.entries:\n#         if entry.serial_no:\n#             # Fetch Serial No document\n#             sn = frappe.get_doc(\"Serial No\", entry.serial_no)\n            \n#             new_reference = {\n#                 \"reference_doctype\": doc.voucher_type,  # Assuming voucher_type is the reference_doctype\n#                 \"reference_no\": doc.voucher_no,\n#                 \"reference_date\": doc.posting_date\n#                 # Add other fields as needed\n#             }\n            \n#             sn.append(\"custom_link_references\", new_reference)\n    \n#             sn.save()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-08-08 12:44:01.972964",
  "module": "DT-UndoWorld-Customization",
  "name": "Delivery Note Reference in Serial no.",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Delivery Note",
  "script": "if doc.items:\n    # go in each line item as serial no is diff for every item\n    for item in doc.items:\n        # Fetch Serial No document\n        if item.serial_no:\n            serial_no = item.serial_no\n            # Fetch Serial No document\n            sn = frappe.get_doc(\"Serial No\", serial_no)\n        \n            # Create a new entry for custom_reference\n            new_reference = {\n                \"reference_doctype\": \"Delivery Note\", \n                \"reference_no\": doc.name,\n                \"reference_date\": doc.posting_date,\n                \"created_by\": doc.owner,\n                # Add other fields as needed\n            }\n            \n            # Append the new entry to custom_reference child table\n            sn.append(\"custom_link_references\", new_reference)\n            sn.save()\n            \n        elif item.serial_and_batch_bundle:\n            \n            sbb = frappe.get_doc(\"Serial and Batch Bundle\", item.serial_and_batch_bundle)\n            \n            # Iterate through entries to fetch serial_no documents\n            for entry in sbb.entries:\n                if entry.serial_no:\n                    # Fetch Serial No document\n                    sn = frappe.get_doc(\"Serial No\", entry.serial_no)\n                    \n                    new_reference = {\n                        \"reference_doctype\": \"Delivery Note\", \n                        \"reference_no\": doc.name,\n                        \"reference_date\": doc.posting_date,\n                        \"created_by\": doc.owner,\n                        # Add other fields as needed\n                    }\n                    \n                    sn.append(\"custom_link_references\", new_reference)\n                    sn.save()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Cancel",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-08-14 15:16:47.477931",
  "module": "DT-UndoWorld-Customization",
  "name": "Removing Stock Entry Reference from Serial no",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if doc.items:\n    # Go through each line item\n    for item in doc.items:\n        if item.serial_no:\n            # Fetch Serial No document\n            sn = frappe.get_doc(\"Serial No\", item.serial_no)\n            \n            # Iterate through custom_link_references to find and remove the entry\n            for ref in sn.custom_link_references:\n                if ref.reference_doctype == \"Stock Entry\" and ref.reference_no == doc.name:\n                    sn.remove(ref)\n                    sn.save()\n                    break\n\n        elif item.serial_and_batch_bundle:\n            sbb = frappe.get_doc(\"Serial and Batch Bundle\", item.serial_and_batch_bundle)\n            \n            # Iterate through entries to fetch serial_no documents\n            for entry in sbb.entries:\n                if entry.serial_no:\n                    # Fetch Serial No document\n                    sn = frappe.get_doc(\"Serial No\", entry.serial_no)\n                    \n                    for ref in sn.custom_link_references:\n                        if ref.reference_doctype == \"Stock Entry\" and ref.reference_no == doc.name:\n                            sn.remove(ref)\n                            sn.save()\n                            break",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-07-18 17:19:13.038772",
  "module": "DT-UndoWorld-Customization",
  "name": "Duplicate BOM msg for Serial Number",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "BOM",
  "script": "for item in doc.items:\n    if item.custom_serial_no:\n        # Check if another BOM exists with the same serial number and is in draft or submitted state\n        existing_bom = frappe.db.exists({\n            \"doctype\": \"BOM Item\",\n            \"custom_serial_no\": item.custom_serial_no,\n            \"parent\": [\"!=\", doc.name],\n            \"parenttype\": \"BOM\",\n            \"docstatus\": [\"<\", 2]  # Exclude canceled BOMs (docstatus 2)\n        })\n\n        if existing_bom:\n            frappe.msgprint(_(\"BOM has already been created for this serial number.\"))\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Validate",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-07-25 11:23:32.707194",
  "module": "DT-UndoWorld-Customization",
  "name": "Add margin to Delivery Note",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Delivery Note",
  "script": "margin_total = 0\nqty_total = 0\nfor d in doc.items:\n    if d.custom_margin_created == 0:\n        check = frappe.db.get_value('Item', d.item_code, 'custom_enable_margin_billing')\n        qty_total = qty_total + d.qty\n        if check == 1:\n            valuation_rate =  frappe.db.get_value('Bin', {\n                'item_code': d.item_code,\n                'warehouse': d.warehouse\n            }, 'valuation_rate') or 0\n            if valuation_rate > 0:\n                margin = d.rate - valuation_rate\n                margin_total = margin_total + (margin*d.qty)\n                d.rate = valuation_rate\n            d.custom_margin_created = 1\nif margin_total > 0:\n    doc.append('items', {\n        'item_code': 'NS-Margin',\n        'hsn': '000000',\n        'qty': qty_total,\n        'uom': 'Nos',\n        'rate': margin_total/qty_total,\n        'amount': margin_total\n    })",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-05-24 13:00:08.991385",
  "module": "DT-UndoWorld-Customization",
  "name": "FYA",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Fiscal Year",
  "script": "year_start_date = doc.year_start_date\nyear_end_date = doc.year_end_date\n# frappe.throw(str(year_start_date))\nif year_start_date:\n    start_date_year = str(year_start_date[2:4])\n    end_date_year = str(year_end_date[2:4])\n    \n    # Set the value of the \"custom_fy_abbreviation\" field\n    final_fya = start_date_year + '-' + end_date_year\n    doc.custom_fy_abbreviation = final_fya",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-05-24 13:02:06.382350",
  "module": "DT-UndoWorld-Customization",
  "name": "FYA Sales Order",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Order",
  "script": "transaction_date = doc.transaction_date\n\n# Query the database to find the fiscal years that match the condition\nfiscal_years = frappe.db.sql(\"\"\"\n    SELECT name, custom_fy_abbreviation, year_start_date, year_end_date\n    FROM `tabFiscal Year`\n    WHERE year_start_date <= %(transaction_date)s AND year_end_date >= %(transaction_date)s\n\"\"\", {\"transaction_date\": transaction_date}, as_dict=True)\n\nif fiscal_years:\n    # Assuming only one fiscal year will be matched, you can handle multiple matches if required\n    matched_fiscal_year = fiscal_years[0]\n    # Set the custom_fy_abbreviation field in the Sales Invoice document\n    doc.custom_fy_abbreviation = matched_fiscal_year.custom_fy_abbreviation\nelse:\n    doc.custom_fy_abbreviation = None",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-05-24 13:02:40.941998",
  "module": "DT-UndoWorld-Customization",
  "name": "FYA Delivery Note",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Delivery Note",
  "script": "posting_date = doc.posting_date\n\n# Query the database to find the fiscal years that match the condition\nfiscal_years = frappe.db.sql(\"\"\"\n    SELECT name, custom_fy_abbreviation, year_start_date, year_end_date\n    FROM `tabFiscal Year`\n    WHERE year_start_date <= %(posting_date)s AND year_end_date >= %(posting_date)s\n\"\"\", {\"posting_date\": posting_date}, as_dict=True)\n\nif fiscal_years:\n    # Assuming only one fiscal year will be matched, you can handle multiple matches if required\n    matched_fiscal_year = fiscal_years[0]\n    # Set the custom_fy_abbreviation field in the Sales Invoice document\n    doc.custom_fy_abbreviation = matched_fiscal_year.custom_fy_abbreviation\nelse:\n    doc.custom_fy_abbreviation = None",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-07-29 12:19:55.778556",
  "module": "DT-UndoWorld-Customization",
  "name": "FYA Sales Invoice",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Invoice",
  "script": "posting_date = doc.posting_date\n\n# Query the database to find the fiscal years that match the condition\nfiscal_years = frappe.db.sql(\"\"\"\n    SELECT name, custom_fy_abbreviation, year_start_date, year_end_date\n    FROM `tabFiscal Year`\n    WHERE year_start_date <= %(posting_date)s AND year_end_date >= %(posting_date)s\n\"\"\", {\"posting_date\": posting_date}, as_dict=True)\n\nif fiscal_years:\n    # Assuming only one fiscal year will be matched, you can handle multiple matches if required\n    matched_fiscal_year = fiscal_years[0]\n    # Set the custom_fy_abbreviation field in the Sales Invoice document\n    doc.custom_fy_abbreviation = matched_fiscal_year.custom_fy_abbreviation\nelse:\n    doc.custom_fy_abbreviation = None",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-05-24 13:22:43.974131",
  "module": "DT-UndoWorld-Customization",
  "name": "FYA Purchase Order",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Order",
  "script": "transaction_date = doc.transaction_date\n\n# Query the database to find the fiscal years that match the condition\nfiscal_years = frappe.db.sql(\"\"\"\n    SELECT name, custom_fy_abbreviation, year_start_date, year_end_date\n    FROM `tabFiscal Year`\n    WHERE year_start_date <= %(transaction_date)s AND year_end_date >= %(transaction_date)s\n\"\"\", {\"transaction_date\": transaction_date}, as_dict=True)\n\nif fiscal_years:\n    # Assuming only one fiscal year will be matched, you can handle multiple matches if required\n    matched_fiscal_year = fiscal_years[0]\n    # Set the custom_fy_abbreviation field in the Sales Invoice document\n    doc.custom_fy_abbreviation = matched_fiscal_year.custom_fy_abbreviation\nelse:\n    doc.custom_fy_abbreviation = None",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-05-24 13:05:15.113956",
  "module": "DT-UndoWorld-Customization",
  "name": "FYA Purchase Receipt",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Receipt",
  "script": "posting_date = doc.posting_date\n\n# Query the database to find the fiscal years that match the condition\nfiscal_years = frappe.db.sql(\"\"\"\n    SELECT name, custom_fy_abbreviation, year_start_date, year_end_date\n    FROM `tabFiscal Year`\n    WHERE year_start_date <= %(posting_date)s AND year_end_date >= %(posting_date)s\n\"\"\", {\"posting_date\": posting_date}, as_dict=True)\n\nif fiscal_years:\n    # Assuming only one fiscal year will be matched, you can handle multiple matches if required\n    matched_fiscal_year = fiscal_years[0]\n    # Set the custom_fy_abbreviation field in the Sales Invoice document\n    doc.custom_fy_abbreviation = matched_fiscal_year.custom_fy_abbreviation\nelse:\n    doc.custom_fy_abbreviation = None",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-05-24 13:06:08.208700",
  "module": "DT-UndoWorld-Customization",
  "name": "FYA Purchase Invoice",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Invoice",
  "script": "posting_date = doc.posting_date\n\n# Query the database to find the fiscal years that match the condition\nfiscal_years = frappe.db.sql(\"\"\"\n    SELECT name, custom_fy_abbreviation, year_start_date, year_end_date\n    FROM `tabFiscal Year`\n    WHERE year_start_date <= %(posting_date)s AND year_end_date >= %(posting_date)s\n\"\"\", {\"posting_date\": posting_date}, as_dict=True)\n\nif fiscal_years:\n    # Assuming only one fiscal year will be matched, you can handle multiple matches if required\n    matched_fiscal_year = fiscal_years[0]\n    # Set the custom_fy_abbreviation field in the Sales Invoice document\n    doc.custom_fy_abbreviation = matched_fiscal_year.custom_fy_abbreviation\nelse:\n    doc.custom_fy_abbreviation = None",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-05-24 13:06:53.142496",
  "module": "DT-UndoWorld-Customization",
  "name": "FYA Asset",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Asset",
  "script": "purchase_date = doc.purchase_date\n\n# Query the database to find the fiscal years that match the condition\nfiscal_years = frappe.db.sql(\"\"\"\n    SELECT name, custom_fy_abbreviation, year_start_date, year_end_date\n    FROM `tabFiscal Year`\n    WHERE year_start_date <= %(purchase_date)s AND year_end_date >= %(purchase_date)s\n\"\"\", {\"purchase_date\": purchase_date}, as_dict=True)\n\nif fiscal_years:\n    # Assuming only one fiscal year will be matched, you can handle multiple matches if required\n    matched_fiscal_year = fiscal_years[0]\n    # Set the custom_fy_abbreviation field in the Sales Invoice document\n    doc.custom_fy_abbreviation = matched_fiscal_year.custom_fy_abbreviation\nelse:\n    doc.custom_fy_abbreviation = None",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-05-24 13:07:29.188571",
  "module": "DT-UndoWorld-Customization",
  "name": "FYA Asset Movement",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Asset Movement",
  "script": "transaction_date = doc.transaction_date\n\n# Query the database to find the fiscal years that match the condition\nfiscal_years = frappe.db.sql(\"\"\"\n    SELECT name, custom_fy_abbreviation, year_start_date, year_end_date\n    FROM `tabFiscal Year`\n    WHERE year_start_date <= %(transaction_date)s AND year_end_date >= %(transaction_date)s\n\"\"\", {\"transaction_date\": transaction_date}, as_dict=True)\n\nif fiscal_years:\n    # Assuming only one fiscal year will be matched, you can handle multiple matches if required\n    matched_fiscal_year = fiscal_years[0]\n    # Set the custom_fy_abbreviation field in the Sales Invoice document\n    doc.custom_fy_abbreviation = matched_fiscal_year.custom_fy_abbreviation\nelse:\n    doc.custom_fy_abbreviation = None",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-05-24 13:08:03.491409",
  "module": "DT-UndoWorld-Customization",
  "name": "FYA Journal Entry",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Journal Entry",
  "script": "posting_date = doc.posting_date\n\n# Query the database to find the fiscal years that match the condition\nfiscal_years = frappe.db.sql(\"\"\"\n    SELECT name, custom_fy_abbreviation, year_start_date, year_end_date\n    FROM `tabFiscal Year`\n    WHERE year_start_date <= %(posting_date)s AND year_end_date >= %(posting_date)s\n\"\"\", {\"posting_date\": posting_date}, as_dict=True)\n\nif fiscal_years:\n    # Assuming only one fiscal year will be matched, you can handle multiple matches if required\n    matched_fiscal_year = fiscal_years[0]\n    # Set the custom_fy_abbreviation field in the Sales Invoice document\n    doc.custom_fy_abbreviation = matched_fiscal_year.custom_fy_abbreviation\nelse:\n    doc.custom_fy_abbreviation = None\n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-06-03 11:22:11.170359",
  "module": "DT-UndoWorld-Customization",
  "name": "FYA Payment Entry",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Payment Entry",
  "script": "posting_date = doc.posting_date\n\n# Query the database to find the fiscal years that match the condition\nfiscal_years = frappe.db.sql(\"\"\"\n    SELECT name, custom_fy_abbreviation, year_start_date, year_end_date\n    FROM `tabFiscal Year`\n    WHERE year_start_date <= %(posting_date)s AND year_end_date >= %(posting_date)s\n\"\"\", {\"posting_date\": posting_date}, as_dict=True)\n\nif fiscal_years:\n    # Assuming only one fiscal year will be matched, you can handle multiple matches if required\n    matched_fiscal_year = fiscal_years[0]\n    # Set the custom_fy_abbreviation field in the Sales Invoice document\n    doc.custom_fy_abbreviation = matched_fiscal_year.custom_fy_abbreviation\nelse:\n    doc.custom_fy_abbreviation = None",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-05-24 13:09:16.400549",
  "module": "DT-UndoWorld-Customization",
  "name": "FYA Stock Entry",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "posting_date = doc.posting_date\n\n# Query the database to find the fiscal years that match the condition\nfiscal_years = frappe.db.sql(\"\"\"\n    SELECT name, custom_fy_abbreviation, year_start_date, year_end_date\n    FROM `tabFiscal Year`\n    WHERE year_start_date <= %(posting_date)s AND year_end_date >= %(posting_date)s\n\"\"\", {\"posting_date\": posting_date}, as_dict=True)\n\nif fiscal_years:\n    # Assuming only one fiscal year will be matched, you can handle multiple matches if required\n    matched_fiscal_year = fiscal_years[0]\n    # Set the custom_fy_abbreviation field in the Sales Invoice document\n    doc.custom_fy_abbreviation = matched_fiscal_year.custom_fy_abbreviation\nelse:\n    doc.custom_fy_abbreviation = None",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-05-24 13:09:45.809287",
  "module": "DT-UndoWorld-Customization",
  "name": "FYA Shipment",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Shipment",
  "script": "pickup_date = doc.pickup_date\n\n# Query the database to find the fiscal years that match the condition\nfiscal_years = frappe.db.sql(\"\"\"\n    SELECT name, custom_fy_abbreviation, year_start_date, year_end_date\n    FROM `tabFiscal Year`\n    WHERE year_start_date <= %(pickup_date)s AND year_end_date >= %(pickup_date)s\n\"\"\", {\"pickup_date\": pickup_date}, as_dict=True)\n\nif fiscal_years:\n    # Assuming only one fiscal year will be matched, you can handle multiple matches if required\n    matched_fiscal_year = fiscal_years[0]\n    # Set the custom_fy_abbreviation field in the Sales Invoice document\n    doc.custom_fy_abbreviation = matched_fiscal_year.custom_fy_abbreviation\nelse:\n    doc.custom_fy_abbreviation = None",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-07-29 12:21:07.932310",
  "module": "DT-UndoWorld-Customization",
  "name": "Add Device Detail to S-No",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Serial No",
  "script": "last_two_digit = doc.name[-2:]\n# frappe.throw(last_two_digit)\nif last_two_digit == '-1':\n    old_serial_no = doc.name[:-2]\n    if frappe.db.exists('Serial No', old_serial_no):\n        imei1 = frappe.db.get_value('Serial No', old_serial_no, 'custom_imei1')\n        imei2 = frappe.db.get_value('Serial No', old_serial_no, 'custom_imei2')\n        eid = frappe.db.get_value('Serial No', old_serial_no, 'custom_eid')\n        sn = frappe.db.get_value('Serial No', old_serial_no, 'custom_sn')\n        doc.custom_imei1 = imei1\n        doc.custom_imei2 = imei2\n        doc.custom_eid = eid\n        doc.custom_sn = sn",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Validate",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-06-26 10:42:30.878839",
  "module": "DT-UndoWorld-Customization",
  "name": "Auto-Tick Inspection Required",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if doc.stock_entry_type == 'Manufacture':\n    if doc.bom_no == '':\n        doc.bom_no = None\n    if doc.bom_no != None:\n        doc.inspection_required = 1",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-06-27 18:03:07.238509",
  "module": "DT-UndoWorld-Customization",
  "name": "Changing QC Pass based on QI Status",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Quality Inspection",
  "script": "if doc.status == \"Accepted\":\n    sn = frappe.get_doc(\"Serial No\", doc.item_serial_no)\n    sn.custom_quality_check_passed = \"Yes\"\n    sn.save()\nelif doc.status == \"Rejected\":\n    sn = frappe.get_doc(\"Serial No\", doc.item_serial_no)\n    sn.custom_quality_check_passed = \"No\"\n    sn.save()\n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-06-27 18:03:07.204371",
  "module": "DT-UndoWorld-Customization",
  "name": "Serial No QC Validation at Stock Entry",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if doc.stock_entry_type == \"Manufacture\":\n    for item in doc.items:\n        tax_credit = frappe.db.get_value(\"Item\", item.item_code, \"is_ineligible_for_itc\")\n        if tax_credit == 1 and item.s_warehouse and item.s_warehouse == \"Work In Progress - UW\" and item.serial_no:\n            yes_no = frappe.db.get_value(\"Serial No\", item.serial_no, \"custom_quality_check_passed\")\n            if yes_no == \"No\":\n                frappe.throw(\"Quality inspection not passed\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-08-14 15:18:14.230949",
  "module": "DT-UndoWorld-Customization",
  "name": "References in Serial no.",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Ledger Entry",
  "script": "if doc.serial_no:\n    # Fetch Serial No document\n    sn = frappe.get_doc(\"Serial No\", doc.serial_no)\n    \n    # Create a new entry for custom_reference\n    new_reference = {\n        \"reference_doctype\": doc.voucher_type,  # Assuming voucher_type is the reference_doctype\n        \"reference_name\": doc.voucher_no,\n        \"reference_voucher_date\": doc.posting_date\n        # Add other fields as needed\n    }\n    \n    # Append the new entry to custom_reference child table\n    sn.append(\"custom_reference\", new_reference)\n    \n    sn.save()\n    \nelif doc.serial_and_batch_bundle:\n    \n    sbb = frappe.get_doc(\"Serial and Batch Bundle\", doc.serial_and_batch_bundle)\n    \n    # Iterate through entries to fetch serial_no documents\n    for entry in sbb.entries:\n        if entry.serial_no:\n            # Fetch Serial No document\n            sn = frappe.get_doc(\"Serial No\", entry.serial_no)\n            \n            new_reference = {\n                \"reference_doctype\": doc.voucher_type,  # Assuming voucher_type is the reference_doctype\n                \"reference_name\": doc.voucher_no,\n                \"reference_voucher_date\": doc.posting_date\n                # Add other fields as needed\n            }\n            \n            sn.append(\"custom_reference\", new_reference)\n    \n            sn.save()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-07-29 12:20:38.428854",
  "module": "DT-UndoWorld-Customization",
  "name": "Updating warranty period",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Invoice",
  "script": "for d in doc.items:\n    frappe.throw(d.delivery_note)\n    if (frappe.db.get_value('Item', d.item_code, 'has_serial_no') == 1) and (d.delivery_note != None):\n        s_b_bundle_name = frappe.db.get_value('Delivery Note Item', d.dn_detail, 'serial_and_batch_bundle')\n        serial_list = frappe.get_all('Serial and Batch Entry',filters = {'parent': s_b_bundle_name},pluck = 'serial_no')\n        for serial in serial_list:\n            serial_doc = frappe.get_cached_doc('Serial No', serial)\n            serial_doc.custom_warranty_start_date = doc.posting_date\n            serial_doc.save()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-07-22 11:45:13.813926",
  "module": "DT-UndoWorld-Customization",
  "name": "Update Warranty Expiry date",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Serial No",
  "script": "if doc.custom_warranty_start_date != None:\n    warranty_days = doc.warranty_period or 0\n    doc.warranty_expiry_date = frappe.utils.add_to_date(doc.posting_date, days = warranty_days)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Cancel",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-08-14 15:16:44.209193",
  "module": "DT-UndoWorld-Customization",
  "name": "Removing Quality Inspection Reference from Serial no.",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Quality Inspection",
  "script": "if doc.item_serial_no:\n    # Fetch the related Serial No document\n    sn = frappe.get_doc(\"Serial No\", doc.item_serial_no)\n    \n    # Iterate through custom_link_references to find the matching reference\n    for ref in sn.custom_link_references:\n        if ref.reference_doctype == \"Quality Inspection\" and ref.reference_no == doc.name:\n            # Remove the matching reference\n            sn.remove(ref)\n            sn.save()\n            break",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Cancel",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-08-14 16:04:55.860871",
  "module": "DT-UndoWorld-Customization",
  "name": "Removing BOM Reference in Serial no.",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "BOM",
  "script": "if doc.items and doc.items[0].custom_serial_no:\n    # Fetch Serial No document\n    serial_no = doc.items[0].custom_serial_no\n\n    if serial_no:\n        # Get the Serial No document\n        sn = frappe.get_doc(\"Serial No\", serial_no)\n        \n        # Iterate through custom_link_references to find the matching reference\n        for ref in sn.custom_link_references:\n            if ref.reference_doctype == \"BOM\" and ref.reference_no == doc.name:\n                # Remove the matching reference\n                sn.remove(ref)\n                sn.save()\n                break  ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Cancel",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-08-14 16:16:02.748110",
  "module": "DT-UndoWorld-Customization",
  "name": "Removing Delivery Note Reference from Serial no.",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Delivery Note",
  "script": "if doc.items:\n    # Go through each line item\n    for item in doc.items:\n        # Check for individual serial_no\n        if item.serial_no:\n            # Fetch Serial No document\n            sn = frappe.get_doc(\"Serial No\", item.serial_no)\n            \n            # Iterate through custom_link_references to find and remove the matching reference\n            for ref in sn.custom_link_references:\n                if ref.reference_doctype == \"Delivery Note\" and ref.reference_no == doc.name:\n                    # Remove the matching reference\n                    sn.remove(ref)\n                    sn.save()\n                    break\n\n        # Handle serial and batch bundle case\n        elif item.serial_and_batch_bundle:\n            sbb = frappe.get_doc(\"Serial and Batch Bundle\", item.serial_and_batch_bundle)\n            \n            # Iterate through entries to fetch serial_no documents\n            for entry in sbb.entries:\n                if entry.serial_no:\n                    # Fetch Serial No document\n                    sn = frappe.get_doc(\"Serial No\", entry.serial_no)\n                    \n                    # Iterate through custom_link_references to find and remove the matching reference\n                    for ref in sn.custom_link_references:\n                        if ref.reference_doctype == \"Delivery Note\" and ref.reference_no == doc.name:\n                            # Remove the matching reference\n                            sn.remove(ref)\n                            sn.save()\n                            break",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-18 21:14:59.011519",
  "module": "DT-UndoWorld-Customization",
  "name": "Start Warranty",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Delivery Note",
  "script": "for row in doc.items:\n    if row.serial_and_batch_bundle:\n        bundle = frappe.get_doc(\"Serial and Batch Bundle\", row.serial_and_batch_bundle)\n        for srn in bundle.entries:\n            if srn.serial_no:\n                srn_doc = frappe.get_doc(\"Serial No\", srn.serial_no)\n                srn_doc.custom_warranty_start_date = doc.posting_date\n                srn_doc.warranty_period = frappe.db.get_value(\"Item\", srn_doc.item_code, \"warranty_period\")\n                srn_doc.warranty_expiry_date = frappe.utils.add_days(srn_doc.custom_warranty_start_date, srn_doc.warranty_period)\n                srn_doc.flags.ignore_permissions = True\n                srn_doc.save()\n    elif row.serial_no:\n        srn_doc = frappe.get_doc(\"Serial No\", row.serial_no)\n        srn_doc.custom_warranty_start_date = doc.posting_date\n        srn_doc.warranty_period = frappe.db.get_value(\"Item\", srn_doc.item_code, \"warranty_period\")\n        srn_doc.warranty_expiry_date = frappe.utils.add_days(srn_doc.custom_warranty_start_date, srn_doc.warranty_period)\n        srn_doc.flags.ignore_permissions = True\n        srn_doc.save()\n        \nfrappe.db.commit()",
  "script_type": "DocType Event"
 }
]